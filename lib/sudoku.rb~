#!/bin/ruby
require_relative './grid'
require_relative './string_parser'
require_relative './generate'

module Sudoku
EXCLUDE = lambda do |enum, val|
  t = 0
  enum.each do |e|
    t += 1 if e.value == 0 && e.exclude(val)
  end
  t
end
# Basic sudoku solver
class Sudoku
  PARSERS = [StringParser]
  attr_reader  :grid
  def initialize(level)
    @grid = Generate.new(level).grid
  end

  # Return true when there is no missing number
  def solved?
    !@grid.nil? && @grid.missing == 0
  end
  
  def solution
    @grid.solution
  end
  def is_correctly
     @grid.valid?
  end
  def to_a
    @grid
  end
  # Solves sudoku and returns 2D Grid
  def solve
    return unless @grid.valid?
    t = 1
    while t > 0
      i = 0
      t = 0
      @grid.each do |x|
        row = (i / 9)
        col = i % 9
        if x.value != 0
          t += EXCLUDE.call(@grid.block_elems(row, col), x.value)
          t += EXCLUDE.call(@grid.row_elems(row), x.value)
          t += EXCLUDE.call(@grid.col_elems(col), x.value)
        end
        i += 1
      end
    end
    @grid.numeric unless solved?
    puts "missing values #{@grid.missing}, filled #{@grid.filled}"
  end

  protected

  def load(game)
    PARSERS.each do |p|
      return p.load(game) if p.supports?(game)
    end
    fail "input '#{game}' is not supported yet"
  end
end
end
