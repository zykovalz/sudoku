#!/usr/bin/ruby


require_relative 'sudoku'
require 'gosu'
include Gosu
module Sudoku



class SudokuGui  < Window
  def initialize
    super(720, 540, false)
    self.caption = "Sudoku"
    @level = 1
    @sudoku = Sudoku.new(@level)
    @background  = Image.new(self, "../lib/img/grid.jpg", false)
    @new_game   = Image.new(self, "img/button.png", false)
    @control   = Image.new(self, "img/kontrol.png", false)
    @menu =  Image.new(self, "img/menu2.png", false)
    @menu2 =  Image.new(self, "img/menu.png", false)
    @sx          = 74
    @sy	         = 129
    @fw = @fh	 = 39
    @menu_y 	 = height - 68
    @font        = Font.new(self, "Arial", 50)
    @font75 	 = Font.new(self, "Arial", 75)
    @active      = [nil, nil]
    @ns          = 0
    @checked = false
    @color = 0xffff0000
    
  end
  def needs_cursor?
    true
  end
  def new_game
    @checked = false
    @sudoku = Sudoku.new(@level)
  end
  def control
   @checked = true
   @color = 0xffff0000
   @color= 0xff00ff00 if @sudoku.is_correctly
  end
  def solve
   @sudoku.solve
  end
  def button_down(id)
    x = mouse_x
    y = mouse_y
    if id == MsLeft
      if (@sx..@sx+9*@fw).cover?(x) and (@sy..@sy+9*@fw).cover?(y)
        @active = [(x.to_i-@sx)/@fw, (y.to_i-@sy)/@fh]
      else
        @active = [nil, nil]
      end
      new_game if (500..635).cover?(x) and (128..167).cover?(y)
      control if (500..677).cover?(x) and (283..321).cover?(y)
      solve if (505..621).cover?(x) and (335..374).cover?(y)
       @level = 1 if (500..618).cover?(x) and (181..220).cover?(y)
      @level = 2  if (500..618).cover?(x) and (230..270).cover?(y)

    elsif @active != [nil, nil] &&  @sudoku.grid[@active[1],@active[0]].origin == 0 
      case id 
	when Kb1,KbNumpad1 then @sudoku.grid[@active[1],@active[0]].set(1)
        when Kb2,KbNumpad2 then @sudoku.grid[@active[1],@active[0]].set(2) 
        when Kb3,KbNumpad3 then @sudoku.grid[@active[1],@active[0]].set(3)
        when Kb4,KbNumpad4 then @sudoku.grid[@active[1],@active[0]].set(4)
        when Kb5,KbNumpad5 then @sudoku.grid[@active[1],@active[0]].set(5)
        when Kb6,KbNumpad6 then @sudoku.grid[@active[1],@active[0]].set(6)
        when Kb7,KbNumpad7 then @sudoku.grid[@active[1],@active[0]].set(7)
        when Kb8,KbNumpad8 then @sudoku.grid[@active[1],@active[0]].set(8)
        when Kb9,KbNumpad9 then @sudoku.grid[@active[1],@active[0]].set(9)
        when KbDelete,KbBackspace then @sudoku.grid[@active[1],@active[0],].set(0)
      end
    end 
    if @active != [nil, nil] 

      case id
	when KbUp    then @active[1] = (@active[1] - 1) % 9             #KbUp
	when KbLeft    then @active[0] = (@active[0] - 1) % 9             #KbLeft
	when KbRight    then @active[0] = (@active[0] + 1) % 9             #KbRight
	when KbDown    then @active[1] = (@active[1] + 1) % 9             #KbDown
      end
    end
end
  def draw
     @background.draw(0, 0, 0)
    #@new_game.draw(500, 128, 0)
    #@control.draw(500, 208, 0)
    #@solve.draw(500, 288, 0)
    @menu.draw(500,128,0) if @level == 1
    @menu2.draw(500,128,0) if @level == 2
    
    @sudoku.to_a.each_with_index{|e, i|
    c =  Gosu::Color.new(136,0,0)
    c =  0xff000000 unless e.origin == 0
@font.draw(e.to_i, @sx + 12 + i%9*@fw, @sy + 2 + i/9*@fw, 2, 1.0, 1.0,c  ) unless e.to_i == 0
}
           if @active != [nil, nil]
	    x1 = @active[0]*@fw + @sx + @active[0]/3 + 2; x2 = x1 + @fw
	    y1 = @active[1]*@fh + @sy + @active[1]/3 + 2; y2 = y1 + @fh
	    c  =  Gosu::Color.new(136,0,0)
	    draw_quad(x1-4, y1-3, c, x1-4, y2, c, x1, y2, c, x1, y1-3, c, 3)
	    draw_quad(x1-3, y1-4, c, x2, y1-4, c, x2, y1, c, x1-3, y1, c, 3)
	    draw_quad(x2-4, y1, c, x2-4, y2, c, x2, y2, c, x2, y1, c, 3)
	    draw_quad(x1, y2-4, c, x2, y2-4, c, x2, y2, c, x1, y2, c, 3)
	  end
    if @checked
     
     c  =  @color
     draw_quad(68, 127, c, 68, 486, c, 72, 486, c, 72, 127, c, 3)
     draw_quad(69, 126, c, 430, 126, c, 430, 130, c, 69, 130, c, 3)
	draw_quad(426, 130, c, 426, 486, c, 430, 486, c, 430, 130, c, 3)
     draw_quad(72, 482, c, 430, 482, c, 430, 486, c, 72, 486, c, 3)
    end
  end


end
end
 
